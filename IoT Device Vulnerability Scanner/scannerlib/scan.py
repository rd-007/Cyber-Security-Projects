"""Subnet discovery + port scan using python-nmap.
Only common ports are scanned to keep it quick.
Requires nmap binary to be installed and in PATH.
"""
from __future__ import annotations
import ipaddress
from dataclasses import dataclass
from typing import List, Dict
import nmap  # type: ignore

COMMON_PORTS = [21, 22, 23, 80, 443, 554, 8000, 8080]


@dataclass
class PortInfo:
    port: int
    state: str  # open / closed
    service: str


@dataclass
class DeviceInfo:
    ip: str
    hostname: str | None
    mac: str | None
    vendor: str | None
    ports: List[PortInfo]


def network_scan(subnet: str) -> List[DeviceInfo]:
    """Return list of devices with open ports on given subnet (CIDR)."""
    try:
        _ = ipaddress.ip_network(subnet)
    except ValueError as e:
        raise ValueError(f"Invalid subnet: {subnet}") from e

    nm = nmap.PortScanner()
    targets = str(subnet)
    ports = ",".join(map(str, COMMON_PORTS))
    nm.scan(hosts=targets, ports=ports, arguments="-sS -T4")

    devices: List[DeviceInfo] = []
    for host in nm.all_hosts():
        hostname = nm[host].hostname() or None
        mac = nm[host]["addresses"].get("mac") if "addresses" in nm[host] else None
        vendor = None
        if mac and "vendor" in nm[host] and mac in nm[host]["vendor"]:
            vendor = nm[host]["vendor"][mac]
        port_infos: List[PortInfo] = []
        for proto in nm[host].all_protocols():
            for port, port_dict in nm[host][proto].items():
                port_infos.append(
                    PortInfo(
                        port=port,
                        state=port_dict.get("state", "unknown"),
                        service=port_dict.get("name", ""),
                    )
                )
        devices.append(
            DeviceInfo(
                ip=host, hostname=hostname, mac=mac, vendor=vendor, ports=port_infos
            )
        )
    return devices

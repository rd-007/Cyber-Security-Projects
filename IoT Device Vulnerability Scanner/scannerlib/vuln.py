"""CVE matching.
For prototype we ship an empty JSON; user can download NVD feeds later.
"""
from __future__ import annotations
from pathlib import Path
import json
from typing import List, Dict, Any
from .scan import DeviceInfo

CVE_PATH = Path(__file__).resolve().parent / "cve_db.json"
if not CVE_PATH.exists():
    CVE_PATH.write_text("[]")

def _load_cves() -> List[Dict[str, Any]]:
    return json.loads(CVE_PATH.read_text())


def match_cves(device: DeviceInfo):
    """Return list of CVEs that match device vendor/service names."""
    cves = _load_cves()
    vendor = (device.vendor or "").lower()
    matches = [cve for cve in cves if vendor and vendor in cve.get("vendor", "").lower()]
    return matches
